package com.tencent.mm.ui.tools;

import android.app.Dialog;
import android.app.TimePickerDialog;
import android.app.TimePickerDialog.OnTimeSetListener;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import com.tencent.mm.R;
import com.tencent.mm.hardcoder.HardCoderJNI;
import com.tencent.mm.hardcoder.e;
import com.tencent.mm.pluginsdk.f.h;
import com.tencent.mm.sdk.platformtools.ad;
import com.tencent.mm.sdk.platformtools.bi;
import com.tencent.mm.sdk.platformtools.w;
import com.tencent.mm.sdk.platformtools.x;
import com.tencent.mm.ui.MMActivity;
import java.sql.Time;
import java.text.DateFormat;

public class HardCoderSettingUI extends MMActivity {
    private boolean mRH = false;
    private final OnTimeSetListener mRI = new OnTimeSetListener() {
        public final void onTimeSet(TimePicker timePicker, int i, int i2) {
            if (HardCoderSettingUI.this.mRH) {
                HardCoderJNI.hcBeginTimeHour = i;
                HardCoderJNI.hcBeginTimeMin = i2;
                HardCoderSettingUI.this.uxt.setText(HardCoderSettingUI.f(HardCoderSettingUI.this, HardCoderJNI.hcBeginTimeHour, HardCoderJNI.hcBeginTimeMin));
                return;
            }
            HardCoderJNI.hcEndTimeHour = i;
            HardCoderJNI.hcEndTimeMin = i2;
            HardCoderSettingUI.this.uxu.setText(HardCoderSettingUI.f(HardCoderSettingUI.this, HardCoderJNI.hcEndTimeHour, HardCoderJNI.hcEndTimeMin));
        }
    };
    private Spinner uxA;
    private CheckBox uxB;
    private CheckBox uxC;
    private EditText uxD;
    private EditText uxE;
    private EditText uxF;
    private Spinner uxG;
    private Spinner uxH;
    private CheckBox uxI;
    private CheckBox uxJ;
    private EditText uxK;
    private EditText uxL;
    private EditText uxM;
    private Spinner uxN;
    private Spinner uxO;
    private CheckBox uxP;
    private CheckBox uxQ;
    private EditText uxR;
    private EditText uxS;
    private EditText uxT;
    private Spinner uxU;
    private Spinner uxV;
    private CheckBox uxW;
    private CheckBox uxX;
    private EditText uxY;
    private EditText uxZ;
    private CheckBox uxo;
    private EditText uxp;
    private CheckBox uxq;
    private CheckBox uxr;
    private CheckBox uxs;
    private TextView uxt;
    private TextView uxu;
    private CheckBox uxv;
    private EditText uxw;
    private EditText uxx;
    private EditText uxy;
    private Spinner uxz;
    private Spinner uyA;
    private Spinner uyB;
    private CheckBox uyC;
    private CheckBox uyD;
    private EditText uyE;
    private EditText uyF;
    private EditText uyG;
    private Spinner uyH;
    private Spinner uyI;
    private CheckBox uyJ;
    private CheckBox uyK;
    private EditText uyL;
    private EditText uyM;
    private EditText uyN;
    private Spinner uyO;
    private Spinner uyP;
    private CheckBox uyQ;
    private CheckBox uyR;
    private EditText uyS;
    private EditText uyT;
    private EditText uyU;
    private Spinner uyV;
    private Spinner uyW;
    private CheckBox uyX;
    private CheckBox uyY;
    private EditText uyZ;
    private EditText uya;
    private Spinner uyb;
    private Spinner uyc;
    private CheckBox uyd;
    private CheckBox uye;
    private EditText uyf;
    private EditText uyg;
    private EditText uyh;
    private Spinner uyi;
    private Spinner uyj;
    private CheckBox uyk;
    private CheckBox uyl;
    private EditText uym;
    private EditText uyn;
    private EditText uyo;
    private Spinner uyp;
    private Spinner uyq;
    private CheckBox uyr;
    private EditText uys;
    private CheckBox uyt;
    private EditText uyu;
    private EditText uyv;
    private EditText uyw;
    private EditText uyx;
    private EditText uyy;
    private EditText uyz;
    private CheckBox uzA;
    private EditText uzB;
    private EditText uzC;
    private EditText uzD;
    private Spinner uzE;
    private Spinner uzF;
    private CheckBox uzG;
    private CheckBox uzH;
    private EditText uzI;
    private EditText uzJ;
    private EditText uzK;
    private Spinner uzL;
    private Spinner uzM;
    private CheckBox uzN;
    private EditText uza;
    private EditText uzb;
    private Spinner uzc;
    private Spinner uzd;
    private CheckBox uze;
    private CheckBox uzf;
    private EditText uzg;
    private EditText uzh;
    private EditText uzi;
    private Spinner uzj;
    private Spinner uzk;
    private CheckBox uzl;
    private CheckBox uzm;
    private EditText uzn;
    private EditText uzo;
    private EditText uzp;
    private Spinner uzq;
    private Spinner uzr;
    private CheckBox uzs;
    private CheckBox uzt;
    private EditText uzu;
    private EditText uzv;
    private EditText uzw;
    private Spinner uzx;
    private Spinner uzy;
    private CheckBox uzz;

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setMMTitle(R.l.settings_hardcoder);
        setBackBtn(new 1(this));
        SharedPreferences sharedPreferences = this.mController.tml.getSharedPreferences("hardcoder_setting", 0);
        if (!sharedPreferences.contains("KEY_HC_ENABLE")) {
            a(sharedPreferences.edit().putBoolean("KEY_HC_ENABLE", true));
        }
        this.uxq = (CheckBox) findViewById(R.h.check_debug);
        this.uxq.setChecked(HardCoderJNI.hcDebug);
        this.uxo = (CheckBox) findViewById(R.h.check_hc);
        this.uxo.setChecked(HardCoderJNI.hcEnable);
        this.uxp = (EditText) findViewById(R.h.retry_connect_interval);
        this.uxp.setText(HardCoderJNI.hcRetryInterval);
        this.uxr = (CheckBox) findViewById(R.h.check_day_switch);
        this.uxr.setChecked(HardCoderJNI.hcSwitchEnable);
        this.uxs = (CheckBox) findViewById(R.h.check_enable_time_limit);
        this.uxs.setChecked(HardCoderJNI.hcTimeLimit);
        this.uxt = (TextView) findViewById(R.h.begin_time);
        this.uxu = (TextView) findViewById(R.h.end_time);
        this.uxt.setText(f(this, HardCoderJNI.hcBeginTimeHour, HardCoderJNI.hcBeginTimeMin));
        this.uxu.setText(f(this, HardCoderJNI.hcEndTimeHour, HardCoderJNI.hcEndTimeMin));
        this.uxt.setOnClickListener(new 2(this));
        this.uxu.setOnClickListener(new 3(this));
        this.uxv = (CheckBox) findViewById(R.h.check_boot);
        this.uxv.setChecked(HardCoderJNI.hcBootEnable);
        this.uxw = (EditText) findViewById(R.h.delay_boot);
        this.uxw.setText(HardCoderJNI.hcBootDelay);
        this.uxx = (EditText) findViewById(R.h.timeout_boot);
        this.uxx.setText(HardCoderJNI.hcBootTimeout);
        this.uxx.setSelection(this.uxx.getText().length());
        this.uxy = (EditText) findViewById(R.h.action_boot);
        this.uxy.setText(HardCoderJNI.hcBootAction);
        this.uxz = (Spinner) findViewById(R.h.cpu_boot);
        this.uxz.setSelection(HardCoderJNI.hcBootCPU);
        this.uxA = (Spinner) findViewById(R.h.io_boot);
        this.uxA.setSelection(HardCoderJNI.hcBootIO);
        this.uxB = (CheckBox) findViewById(R.h.thr_boot);
        this.uxB.setChecked(HardCoderJNI.hcBootThr);
        this.uxC = (CheckBox) findViewById(R.h.check_enter_chatting);
        this.uxC.setChecked(HardCoderJNI.hcEnterChattingEnable);
        this.uxD = (EditText) findViewById(R.h.delay_enter_chatting);
        this.uxD.setText(HardCoderJNI.hcEnterChattingDelay);
        this.uxE = (EditText) findViewById(R.h.timeout_enter_chatting);
        this.uxE.setText(HardCoderJNI.hcEnterChattingTimeout);
        this.uxE.setSelection(this.uxE.getText().length());
        this.uxF = (EditText) findViewById(R.h.action_enter_chatting);
        this.uxF.setText(HardCoderJNI.hcEnterChattingAction);
        this.uxG = (Spinner) findViewById(R.h.cpu_enter_chatting);
        this.uxG.setSelection(HardCoderJNI.hcEnterChattingCPU);
        this.uxH = (Spinner) findViewById(R.h.io_enter_chatting);
        this.uxH.setSelection(HardCoderJNI.hcEnterChattingIO);
        this.uxI = (CheckBox) findViewById(R.h.thr_enter_chatting);
        this.uxI.setChecked(HardCoderJNI.hcEnterChattingThr);
        this.uxJ = (CheckBox) findViewById(R.h.check_quit_chatting);
        this.uxJ.setChecked(HardCoderJNI.hcQuitChattingEnable);
        this.uxK = (EditText) findViewById(R.h.delay_quit_chatting);
        this.uxK.setText(HardCoderJNI.hcQuitChattingDelay);
        this.uxL = (EditText) findViewById(R.h.timeout_quit_chatting);
        this.uxL.setText(HardCoderJNI.hcQuitChattingTimeout);
        this.uxL.setSelection(this.uxL.getText().length());
        this.uxM = (EditText) findViewById(R.h.action_quit_chatting);
        this.uxM.setText(HardCoderJNI.hcQuitChattingAction);
        this.uxN = (Spinner) findViewById(R.h.cpu_quit_chatting);
        this.uxN.setSelection(HardCoderJNI.hcQuitChattingCPU);
        this.uxO = (Spinner) findViewById(R.h.io_quit_chatting);
        this.uxO.setSelection(HardCoderJNI.hcQuitChattingIO);
        this.uxP = (CheckBox) findViewById(R.h.thr_quit_chatting);
        this.uxP.setChecked(HardCoderJNI.hcQuitChattingThr);
        this.uxQ = (CheckBox) findViewById(R.h.check_send_msg);
        this.uxQ.setChecked(HardCoderJNI.hcSendMsgEnable);
        this.uxR = (EditText) findViewById(R.h.delay_send_msg);
        this.uxR.setText(HardCoderJNI.hcSendMsgDelay);
        this.uxS = (EditText) findViewById(R.h.timeout_send_msg);
        this.uxS.setText(HardCoderJNI.hcSendMsgTimeout);
        this.uxS.setSelection(this.uxS.getText().length());
        this.uxT = (EditText) findViewById(R.h.action_send_msg);
        this.uxT.setText(HardCoderJNI.hcSendMsgAction);
        this.uxU = (Spinner) findViewById(R.h.cpu_send_msg);
        this.uxU.setSelection(HardCoderJNI.hcSendMsgCPU);
        this.uxV = (Spinner) findViewById(R.h.io_send_msg);
        this.uxV.setSelection(HardCoderJNI.hcSendMsgIO);
        this.uxW = (CheckBox) findViewById(R.h.thr_send_msg);
        this.uxW.setChecked(HardCoderJNI.hcSendMsgThr);
        this.uxX = (CheckBox) findViewById(R.h.check_send_pic_msg);
        this.uxX.setChecked(HardCoderJNI.hcSendPicMsgEnable);
        this.uxY = (EditText) findViewById(R.h.delay_send_pic_msg);
        this.uxY.setText(HardCoderJNI.hcSendPicMsgDelay);
        this.uxZ = (EditText) findViewById(R.h.timeout_send_pic_msg);
        this.uxZ.setText(HardCoderJNI.hcSendPicMsgTimeout);
        this.uxZ.setSelection(this.uxZ.getText().length());
        this.uya = (EditText) findViewById(R.h.action_send_pic_msg);
        this.uya.setText(HardCoderJNI.hcSendPicMsgAction);
        this.uyb = (Spinner) findViewById(R.h.cpu_send_pic_msg);
        this.uyb.setSelection(HardCoderJNI.hcSendPicMsgCPU);
        this.uyc = (Spinner) findViewById(R.h.io_send_pic_msg);
        this.uyc.setSelection(HardCoderJNI.hcSendPicMsgIO);
        this.uyd = (CheckBox) findViewById(R.h.thr_send_pic_msg);
        this.uyd.setChecked(HardCoderJNI.hcSendPicMsgThr);
        this.uye = (CheckBox) findViewById(R.h.check_receive_msg);
        this.uye.setChecked(HardCoderJNI.hcReceiveMsgEnable);
        this.uyf = (EditText) findViewById(R.h.delay_receive_msg);
        this.uyf.setText(HardCoderJNI.hcReceiveMsgDelay);
        this.uyg = (EditText) findViewById(R.h.timeout_receive_msg);
        this.uyg.setText(HardCoderJNI.hcReceiveMsgTimeout);
        this.uyg.setSelection(this.uyg.getText().length());
        this.uyh = (EditText) findViewById(R.h.action_receive_msg);
        this.uyh.setText(HardCoderJNI.hcReceiveMsgAction);
        this.uyi = (Spinner) findViewById(R.h.cpu_receive_msg);
        this.uyi.setSelection(HardCoderJNI.hcReceiveMsgCPU);
        this.uyj = (Spinner) findViewById(R.h.io_receive_msg);
        this.uyj.setSelection(HardCoderJNI.hcReceiveMsgIO);
        this.uyk = (CheckBox) findViewById(R.h.thr_receive_msg);
        this.uyk.setChecked(HardCoderJNI.hcReceiveMsgThr);
        this.uyl = (CheckBox) findViewById(R.h.check_update_chatroom);
        this.uyl.setChecked(HardCoderJNI.hcUpdateChatroomEnable);
        this.uym = (EditText) findViewById(R.h.delay_update_chatroom);
        this.uym.setText(HardCoderJNI.hcUpdateChatroomDelay);
        this.uyn = (EditText) findViewById(R.h.timeout_update_chatroom);
        this.uyn.setText(HardCoderJNI.hcUpdateChatroomTimeout);
        this.uyn.setSelection(this.uyn.getText().length());
        this.uyo = (EditText) findViewById(R.h.action_update_chatroom);
        this.uyo.setText(HardCoderJNI.hcUpdateChatroomAction);
        this.uyp = (Spinner) findViewById(R.h.cpu_update_chatroom);
        this.uyp.setSelection(HardCoderJNI.hcUpdateChatroomCPU);
        this.uyq = (Spinner) findViewById(R.h.io_update_chatroom);
        this.uyq.setSelection(HardCoderJNI.hcUpdateChatroomIO);
        this.uyr = (CheckBox) findViewById(R.h.thr_update_chatroom);
        this.uyr.setChecked(HardCoderJNI.hcUpdateChatroomThr);
        this.uys = (EditText) findViewById(R.h.update_chatroom_member_count);
        this.uys.setText(HardCoderJNI.hcUpdateChatroomMemberCount);
        this.uyt = (CheckBox) findViewById(R.h.check_db);
        this.uyt.setChecked(HardCoderJNI.hcDBEnable);
        this.uyu = (EditText) findViewById(R.h.delay_db_q);
        this.uyu.setText(HardCoderJNI.hcDBDelayQuery);
        this.uyv = (EditText) findViewById(R.h.delay_db_w);
        this.uyv.setText(HardCoderJNI.hcDBDelayWrite);
        this.uyw = (EditText) findViewById(R.h.timeout_db);
        this.uyw.setText(HardCoderJNI.hcDBTimeout);
        this.uyx = (EditText) findViewById(R.h.timeout_db_busy);
        this.uyx.setText(HardCoderJNI.hcDBTimeoutBusy);
        this.uyy = (EditText) findViewById(R.h.action_db_q);
        this.uyy.setText(HardCoderJNI.hcDBActionQuery);
        this.uyz = (EditText) findViewById(R.h.action_db_w);
        this.uyz.setText(HardCoderJNI.hcDBActionWrite);
        this.uyA = (Spinner) findViewById(R.h.cpu_db);
        this.uyA.setSelection(HardCoderJNI.hcDBCPU);
        this.uyB = (Spinner) findViewById(R.h.io_db);
        this.uyB.setSelection(HardCoderJNI.hcDBIO);
        this.uyC = (CheckBox) findViewById(R.h.thr_db);
        this.uyC.setChecked(HardCoderJNI.hcDBThr);
        this.uyD = (CheckBox) findViewById(R.h.check_video);
        this.uyD.setChecked(HardCoderJNI.hcEncodeVideoEnable);
        this.uyE = (EditText) findViewById(R.h.delay_video);
        this.uyE.setText(HardCoderJNI.hcEncodeVideoDelay);
        this.uyF = (EditText) findViewById(R.h.timeout_video);
        this.uyF.setText(HardCoderJNI.hcEncodeVideoTimeout);
        this.uyG = (EditText) findViewById(R.h.action_video);
        this.uyG.setText(HardCoderJNI.hcEncodeVideoAction);
        this.uyH = (Spinner) findViewById(R.h.cpu_video);
        this.uyH.setSelection(HardCoderJNI.hcEncodeVideoCPU);
        this.uyI = (Spinner) findViewById(R.h.io_video);
        this.uyI.setSelection(HardCoderJNI.hcEncodeVideoIO);
        this.uyJ = (CheckBox) findViewById(R.h.thr_video);
        this.uyJ.setChecked(HardCoderJNI.hcEncodeVideoThr);
        this.uyK = (CheckBox) findViewById(R.h.check_decode_pic);
        this.uyK.setChecked(HardCoderJNI.hcDecodePicEnable);
        this.uyL = (EditText) findViewById(R.h.delay_decode_pic);
        this.uyL.setText(HardCoderJNI.hcDecodePicDelay);
        this.uyM = (EditText) findViewById(R.h.timeout_decode_pic);
        this.uyM.setText(HardCoderJNI.hcDecodePicTimeout);
        this.uyN = (EditText) findViewById(R.h.action_decode_pic);
        this.uyN.setText(HardCoderJNI.hcDecodePicAction);
        this.uyO = (Spinner) findViewById(R.h.cpu_decode_pic);
        this.uyO.setSelection(HardCoderJNI.hcDecodePicCPU);
        this.uyP = (Spinner) findViewById(R.h.io_decode_pic);
        this.uyP.setSelection(HardCoderJNI.hcDecodePicIO);
        this.uyQ = (CheckBox) findViewById(R.h.thr_decode_pic);
        this.uyQ.setChecked(HardCoderJNI.hcDecodePicThr);
        this.uyR = (CheckBox) findViewById(R.h.check_gif);
        this.uyR.setChecked(HardCoderJNI.hcGifEnable);
        this.uyS = (EditText) findViewById(R.h.delay_gif);
        this.uyS.setText(HardCoderJNI.hcGifDelay);
        this.uyT = (EditText) findViewById(R.h.timeout_gif);
        this.uyT.setText(HardCoderJNI.hcGifTimeout);
        this.uyU = (EditText) findViewById(R.h.action_gif);
        this.uyU.setText(HardCoderJNI.hcGifAction);
        this.uyV = (Spinner) findViewById(R.h.cpu_gif);
        this.uyV.setSelection(HardCoderJNI.hcGifCPU);
        this.uyW = (Spinner) findViewById(R.h.io_gif);
        this.uyW.setSelection(HardCoderJNI.hcGifIO);
        this.uyX = (CheckBox) findViewById(R.h.thr_gif);
        this.uyX.setChecked(HardCoderJNI.hcGifThr);
        this.uyY = (CheckBox) findViewById(R.h.check_gif_frame);
        this.uyY.setChecked(HardCoderJNI.hcGifFrameEnable);
        this.uyZ = (EditText) findViewById(R.h.delay_gif_frame);
        this.uyZ.setText(HardCoderJNI.hcGifFrameDelay);
        this.uza = (EditText) findViewById(R.h.timeout_gif_frame);
        this.uza.setText(HardCoderJNI.hcGifFrameTimeout);
        this.uzb = (EditText) findViewById(R.h.action_gif_frame);
        this.uzb.setText(HardCoderJNI.hcGifFrameAction);
        this.uzc = (Spinner) findViewById(R.h.cpu_gif_frame);
        this.uzc.setSelection(HardCoderJNI.hcGifFrameCPU);
        this.uzd = (Spinner) findViewById(R.h.io_gif_frame);
        this.uzd.setSelection(HardCoderJNI.hcGifFrameIO);
        this.uze = (CheckBox) findViewById(R.h.thr_gif_frame);
        this.uze.setChecked(HardCoderJNI.hcGifFrameThr);
        this.uzf = (CheckBox) findViewById(R.h.check_sns_scroll);
        this.uzf.setChecked(HardCoderJNI.hcSNSScrollEnable);
        this.uzg = (EditText) findViewById(R.h.delay_sns_scroll);
        this.uzg.setText(HardCoderJNI.hcSNSScrollDelay);
        this.uzh = (EditText) findViewById(R.h.timeout_sns_scroll);
        this.uzh.setText(HardCoderJNI.hcSNSScrollTimeout);
        this.uzi = (EditText) findViewById(R.h.action_sns_scroll);
        this.uzi.setText(HardCoderJNI.hcSNSScrollAction);
        this.uzj = (Spinner) findViewById(R.h.cpu_sns_scroll);
        this.uzj.setSelection(HardCoderJNI.hcSNSScrollCPU);
        this.uzk = (Spinner) findViewById(R.h.io_sns_scroll);
        this.uzk.setSelection(HardCoderJNI.hcSNSScrollIO);
        this.uzl = (CheckBox) findViewById(R.h.thr_sns_scroll);
        this.uzl.setChecked(HardCoderJNI.hcSNSScrollThr);
        this.uzm = (CheckBox) findViewById(R.h.check_sns_user_scroll);
        this.uzm.setChecked(HardCoderJNI.hcSNSUserScrollEnable);
        this.uzn = (EditText) findViewById(R.h.delay_sns_user_scroll);
        this.uzn.setText(HardCoderJNI.hcSNSUserScrollDelay);
        this.uzo = (EditText) findViewById(R.h.timeout_sns_user_scroll);
        this.uzo.setText(HardCoderJNI.hcSNSUserScrollTimeout);
        this.uzp = (EditText) findViewById(R.h.action_sns_user_scroll);
        this.uzp.setText(HardCoderJNI.hcSNSUserScrollAction);
        this.uzq = (Spinner) findViewById(R.h.cpu_sns_user_scroll);
        this.uzq.setSelection(HardCoderJNI.hcSNSUserScrollCPU);
        this.uzr = (Spinner) findViewById(R.h.io_sns_user_scroll);
        this.uzr.setSelection(HardCoderJNI.hcSNSUserScrollIO);
        this.uzs = (CheckBox) findViewById(R.h.thr_sns_user_scroll);
        this.uzs.setChecked(HardCoderJNI.hcSNSUserScrollThr);
        this.uzt = (CheckBox) findViewById(R.h.check_sns_msg_scroll);
        this.uzt.setChecked(HardCoderJNI.hcSNSMsgScrollEnable);
        this.uzu = (EditText) findViewById(R.h.delay_sns_msg_scroll);
        this.uzu.setText(HardCoderJNI.hcSNSMsgScrollDelay);
        this.uzv = (EditText) findViewById(R.h.timeout_sns_msg_scroll);
        this.uzv.setText(HardCoderJNI.hcSNSMsgScrollTimeout);
        this.uzw = (EditText) findViewById(R.h.action_sns_msg_scroll);
        this.uzw.setText(HardCoderJNI.hcSNSMsgScrollAction);
        this.uzx = (Spinner) findViewById(R.h.cpu_sns_msg_scroll);
        this.uzx.setSelection(HardCoderJNI.hcSNSMsgScrollCPU);
        this.uzy = (Spinner) findViewById(R.h.io_sns_msg_scroll);
        this.uzy.setSelection(HardCoderJNI.hcSNSMsgScrollIO);
        this.uzz = (CheckBox) findViewById(R.h.thr_sns_msg_scroll);
        this.uzz.setChecked(HardCoderJNI.hcSNSMsgScrollThr);
        this.uzA = (CheckBox) findViewById(R.h.check_media_gallery_scroll);
        this.uzA.setChecked(HardCoderJNI.hcMediaGalleryScrollEnable);
        this.uzB = (EditText) findViewById(R.h.delay_media_gallery_scroll);
        this.uzB.setText(HardCoderJNI.hcMediaGalleryScrollDelay);
        this.uzC = (EditText) findViewById(R.h.timeout_media_gallery_scroll);
        this.uzC.setText(HardCoderJNI.hcMediaGalleryScrollTimeout);
        this.uzD = (EditText) findViewById(R.h.action_media_gallery_scroll);
        this.uzD.setText(HardCoderJNI.hcMediaGalleryScrollAction);
        this.uzE = (Spinner) findViewById(R.h.cpu_media_gallery_scroll);
        this.uzE.setSelection(HardCoderJNI.hcMediaGalleryScrollCPU);
        this.uzF = (Spinner) findViewById(R.h.io_media_gallery_scroll);
        this.uzF.setSelection(HardCoderJNI.hcMediaGalleryScrollIO);
        this.uzG = (CheckBox) findViewById(R.h.thr_media_gallery_scroll);
        this.uzG.setChecked(HardCoderJNI.hcMediaGalleryScrollThr);
        this.uzH = (CheckBox) findViewById(R.h.check_album_scroll);
        this.uzH.setChecked(HardCoderJNI.hcAlbumScrollEnable);
        this.uzI = (EditText) findViewById(R.h.delay_album_scroll);
        this.uzI.setText(HardCoderJNI.hcAlbumScrollDelay);
        this.uzJ = (EditText) findViewById(R.h.timeout_album_scroll);
        this.uzJ.setText(HardCoderJNI.hcAlbumScrollTimeout);
        this.uzK = (EditText) findViewById(R.h.action_album_scroll);
        this.uzK.setText(HardCoderJNI.hcAlbumScrollAction);
        this.uzL = (Spinner) findViewById(R.h.cpu_album_scroll);
        this.uzL.setSelection(HardCoderJNI.hcAlbumScrollCPU);
        this.uzM = (Spinner) findViewById(R.h.io_album_scroll);
        this.uzM.setSelection(HardCoderJNI.hcAlbumScrollIO);
        this.uzN = (CheckBox) findViewById(R.h.thr_album_scroll);
        this.uzN.setChecked(HardCoderJNI.hcAlbumScrollThr);
        this.uxo.setOnClickListener(new 4(this));
    }

    protected Dialog onCreateDialog(int i) {
        switch (i) {
            case 1:
                if (this.mRH) {
                    return new TimePickerDialog(this.mController.tml, this.mRI, HardCoderJNI.hcBeginTimeHour, HardCoderJNI.hcBeginTimeMin, false);
                }
                return new TimePickerDialog(this.mController.tml, this.mRI, HardCoderJNI.hcEndTimeHour, HardCoderJNI.hcBeginTimeMin, false);
            default:
                return null;
        }
    }

    protected void onDestroy() {
        x.i("HardCoderSettingUI", "save");
        if (this.uxo.isChecked() && !HardCoderJNI.hcEnable) {
            HardCoderJNI.hcEnable = this.uxo.isChecked();
            HardCoderJNI.initHardCoder();
            HardCoderJNI.initReporter(new e());
        }
        HardCoderJNI.hcDebug = this.uxq.isChecked();
        HardCoderJNI.hcEnable = this.uxo.isChecked();
        HardCoderJNI.hcRetryInterval = bi.getInt(this.uxp.getText().toString(), HardCoderJNI.hcRetryInterval);
        if (HardCoderJNI.checkEnv) {
            HardCoderJNI.setDebug(HardCoderJNI.hcDebug);
            HardCoderJNI.setHCEnable(HardCoderJNI.hcEnable);
            HardCoderJNI.setRetryConnectInterval(HardCoderJNI.hcRetryInterval);
        }
        HardCoderJNI.hcSwitchEnable = this.uxr.isChecked();
        HardCoderJNI.hcTimeLimit = this.uxs.isChecked();
        HardCoderJNI.hcBootEnable = this.uxv.isChecked();
        HardCoderJNI.hcBootDelay = bi.getInt(this.uxw.getText().toString(), HardCoderJNI.hcBootDelay);
        HardCoderJNI.hcBootCPU = this.uxz.getSelectedItemPosition();
        HardCoderJNI.hcBootIO = this.uxA.getSelectedItemPosition();
        HardCoderJNI.hcBootThr = this.uxB.isChecked();
        HardCoderJNI.hcBootTimeout = bi.getInt(this.uxx.getText().toString(), HardCoderJNI.hcBootTimeout);
        HardCoderJNI.hcBootAction = bi.getLong(this.uxy.getText().toString(), HardCoderJNI.hcBootAction);
        HardCoderJNI.hcEnterChattingEnable = this.uxC.isChecked();
        HardCoderJNI.hcEnterChattingDelay = bi.getInt(this.uxD.getText().toString(), HardCoderJNI.hcEnterChattingDelay);
        HardCoderJNI.hcEnterChattingCPU = this.uxG.getSelectedItemPosition();
        HardCoderJNI.hcEnterChattingIO = this.uxH.getSelectedItemPosition();
        HardCoderJNI.hcEnterChattingThr = this.uxI.isChecked();
        HardCoderJNI.hcEnterChattingTimeout = bi.getInt(this.uxE.getText().toString(), HardCoderJNI.hcEnterChattingTimeout);
        HardCoderJNI.hcEnterChattingAction = bi.getLong(this.uxF.getText().toString(), HardCoderJNI.hcEnterChattingAction);
        HardCoderJNI.hcQuitChattingEnable = this.uxJ.isChecked();
        HardCoderJNI.hcQuitChattingDelay = bi.getInt(this.uxK.getText().toString(), HardCoderJNI.hcQuitChattingDelay);
        HardCoderJNI.hcQuitChattingCPU = this.uxN.getSelectedItemPosition();
        HardCoderJNI.hcQuitChattingIO = this.uxO.getSelectedItemPosition();
        HardCoderJNI.hcQuitChattingThr = this.uxP.isChecked();
        HardCoderJNI.hcQuitChattingTimeout = bi.getInt(this.uxL.getText().toString(), HardCoderJNI.hcQuitChattingTimeout);
        HardCoderJNI.hcQuitChattingAction = bi.getLong(this.uxM.getText().toString(), HardCoderJNI.hcQuitChattingAction);
        HardCoderJNI.hcSendMsgEnable = this.uxQ.isChecked();
        HardCoderJNI.hcSendMsgDelay = bi.getInt(this.uxR.getText().toString(), HardCoderJNI.hcSendMsgDelay);
        HardCoderJNI.hcSendMsgCPU = this.uxU.getSelectedItemPosition();
        HardCoderJNI.hcSendMsgIO = this.uxV.getSelectedItemPosition();
        HardCoderJNI.hcSendMsgThr = this.uxW.isChecked();
        HardCoderJNI.hcSendMsgTimeout = bi.getInt(this.uxS.getText().toString(), HardCoderJNI.hcSendMsgTimeout);
        HardCoderJNI.hcSendMsgAction = bi.getLong(this.uxT.getText().toString(), HardCoderJNI.hcSendMsgAction);
        HardCoderJNI.hcSendPicMsgEnable = this.uxX.isChecked();
        HardCoderJNI.hcSendPicMsgDelay = bi.getInt(this.uxY.getText().toString(), HardCoderJNI.hcSendPicMsgDelay);
        HardCoderJNI.hcSendPicMsgCPU = this.uyb.getSelectedItemPosition();
        HardCoderJNI.hcSendPicMsgIO = this.uyc.getSelectedItemPosition();
        HardCoderJNI.hcSendPicMsgThr = this.uyd.isChecked();
        HardCoderJNI.hcSendPicMsgTimeout = bi.getInt(this.uxZ.getText().toString(), HardCoderJNI.hcSendPicMsgTimeout);
        HardCoderJNI.hcSendPicMsgAction = bi.getLong(this.uya.getText().toString(), HardCoderJNI.hcSendPicMsgAction);
        HardCoderJNI.hcReceiveMsgEnable = this.uye.isChecked();
        HardCoderJNI.hcReceiveMsgDelay = bi.getInt(this.uyf.getText().toString(), HardCoderJNI.hcReceiveMsgDelay);
        HardCoderJNI.hcReceiveMsgCPU = this.uyi.getSelectedItemPosition();
        HardCoderJNI.hcReceiveMsgIO = this.uyj.getSelectedItemPosition();
        HardCoderJNI.hcReceiveMsgThr = this.uyk.isChecked();
        HardCoderJNI.hcReceiveMsgTimeout = bi.getInt(this.uyg.getText().toString(), HardCoderJNI.hcReceiveMsgTimeout);
        HardCoderJNI.hcReceiveMsgAction = bi.getLong(this.uyh.getText().toString(), HardCoderJNI.hcReceiveMsgAction);
        HardCoderJNI.hcUpdateChatroomEnable = this.uyl.isChecked();
        HardCoderJNI.hcUpdateChatroomDelay = bi.getInt(this.uym.getText().toString(), HardCoderJNI.hcUpdateChatroomDelay);
        HardCoderJNI.hcUpdateChatroomCPU = this.uyp.getSelectedItemPosition();
        HardCoderJNI.hcUpdateChatroomIO = this.uyq.getSelectedItemPosition();
        HardCoderJNI.hcUpdateChatroomThr = this.uyr.isChecked();
        HardCoderJNI.hcUpdateChatroomTimeout = bi.getInt(this.uyn.getText().toString(), HardCoderJNI.hcUpdateChatroomTimeout);
        HardCoderJNI.hcUpdateChatroomAction = bi.getLong(this.uyo.getText().toString(), HardCoderJNI.hcUpdateChatroomAction);
        HardCoderJNI.hcUpdateChatroomMemberCount = bi.getLong(this.uys.getText().toString(), HardCoderJNI.hcUpdateChatroomMemberCount);
        HardCoderJNI.hcDBEnable = this.uyt.isChecked();
        HardCoderJNI.hcDBDelayQuery = bi.getInt(this.uyu.getText().toString(), HardCoderJNI.hcDBDelayQuery);
        HardCoderJNI.hcDBDelayWrite = bi.getInt(this.uyv.getText().toString(), HardCoderJNI.hcDBDelayWrite);
        HardCoderJNI.hcDBCPU = this.uxz.getSelectedItemPosition();
        HardCoderJNI.hcDBIO = this.uxA.getSelectedItemPosition();
        HardCoderJNI.hcDBThr = this.uxB.isChecked();
        HardCoderJNI.hcDBTimeout = bi.getInt(this.uyw.getText().toString(), HardCoderJNI.hcDBTimeout);
        HardCoderJNI.hcDBTimeoutBusy = bi.getInt(this.uyx.getText().toString(), HardCoderJNI.hcDBTimeoutBusy);
        HardCoderJNI.hcDBActionQuery = bi.getLong(this.uyy.getText().toString(), HardCoderJNI.hcDBActionQuery);
        HardCoderJNI.hcDBActionWrite = bi.getLong(this.uyz.getText().toString(), HardCoderJNI.hcDBActionWrite);
        HardCoderJNI.hcEncodeVideoEnable = this.uyD.isChecked();
        HardCoderJNI.hcEncodeVideoDelay = bi.getInt(this.uyE.getText().toString(), HardCoderJNI.hcEncodeVideoDelay);
        HardCoderJNI.hcEncodeVideoCPU = this.uyH.getSelectedItemPosition();
        HardCoderJNI.hcEncodeVideoIO = this.uyI.getSelectedItemPosition();
        HardCoderJNI.hcEncodeVideoThr = this.uyJ.isChecked();
        HardCoderJNI.hcEncodeVideoTimeout = bi.getInt(this.uyF.getText().toString(), HardCoderJNI.hcEncodeVideoTimeout);
        HardCoderJNI.hcEncodeVideoAction = bi.getLong(this.uyG.getText().toString(), HardCoderJNI.hcEncodeVideoAction);
        HardCoderJNI.hcDecodePicEnable = this.uyK.isChecked();
        HardCoderJNI.hcDecodePicDelay = bi.getInt(this.uyL.getText().toString(), HardCoderJNI.hcDecodePicDelay);
        HardCoderJNI.hcDecodePicCPU = this.uyO.getSelectedItemPosition();
        HardCoderJNI.hcDecodePicIO = this.uyP.getSelectedItemPosition();
        HardCoderJNI.hcDecodePicThr = this.uyQ.isChecked();
        HardCoderJNI.hcDecodePicTimeout = bi.getInt(this.uyM.getText().toString(), HardCoderJNI.hcDecodePicTimeout);
        HardCoderJNI.hcDecodePicAction = bi.getLong(this.uyN.getText().toString(), HardCoderJNI.hcDecodePicAction);
        HardCoderJNI.hcGifEnable = this.uyR.isChecked();
        HardCoderJNI.hcGifDelay = bi.getInt(this.uyS.getText().toString(), HardCoderJNI.hcGifDelay);
        HardCoderJNI.hcGifCPU = this.uyV.getSelectedItemPosition();
        HardCoderJNI.hcGifIO = this.uyW.getSelectedItemPosition();
        HardCoderJNI.hcGifThr = this.uyX.isChecked();
        HardCoderJNI.hcGifTimeout = bi.getInt(this.uyT.getText().toString(), HardCoderJNI.hcGifTimeout);
        HardCoderJNI.hcGifAction = bi.getLong(this.uyU.getText().toString(), HardCoderJNI.hcGifAction);
        HardCoderJNI.hcGifFrameEnable = this.uyY.isChecked();
        HardCoderJNI.hcGifFrameDelay = bi.getInt(this.uyZ.getText().toString(), HardCoderJNI.hcGifFrameDelay);
        HardCoderJNI.hcGifFrameCPU = this.uzc.getSelectedItemPosition();
        HardCoderJNI.hcGifFrameIO = this.uzd.getSelectedItemPosition();
        HardCoderJNI.hcGifFrameThr = this.uze.isChecked();
        HardCoderJNI.hcGifFrameTimeout = bi.getInt(this.uza.getText().toString(), HardCoderJNI.hcGifFrameTimeout);
        HardCoderJNI.hcGifFrameAction = bi.getLong(this.uzb.getText().toString(), HardCoderJNI.hcGifFrameAction);
        HardCoderJNI.hcSNSScrollEnable = this.uzf.isChecked();
        HardCoderJNI.hcSNSScrollDelay = bi.getInt(this.uzg.getText().toString(), HardCoderJNI.hcSNSScrollDelay);
        HardCoderJNI.hcSNSScrollCPU = this.uzj.getSelectedItemPosition();
        HardCoderJNI.hcSNSScrollIO = this.uzk.getSelectedItemPosition();
        HardCoderJNI.hcSNSScrollThr = this.uzl.isChecked();
        HardCoderJNI.hcSNSScrollTimeout = bi.getInt(this.uzh.getText().toString(), HardCoderJNI.hcSNSScrollTimeout);
        HardCoderJNI.hcSNSScrollAction = bi.getLong(this.uzi.getText().toString(), HardCoderJNI.hcSNSScrollAction);
        HardCoderJNI.hcSNSUserScrollEnable = this.uzm.isChecked();
        HardCoderJNI.hcSNSUserScrollDelay = bi.getInt(this.uzn.getText().toString(), HardCoderJNI.hcSNSUserScrollDelay);
        HardCoderJNI.hcSNSUserScrollCPU = this.uzq.getSelectedItemPosition();
        HardCoderJNI.hcSNSUserScrollIO = this.uzr.getSelectedItemPosition();
        HardCoderJNI.hcSNSUserScrollThr = this.uzs.isChecked();
        HardCoderJNI.hcSNSUserScrollTimeout = bi.getInt(this.uzo.getText().toString(), HardCoderJNI.hcSNSUserScrollTimeout);
        HardCoderJNI.hcSNSUserScrollAction = bi.getLong(this.uzp.getText().toString(), HardCoderJNI.hcSNSUserScrollAction);
        HardCoderJNI.hcSNSMsgScrollEnable = this.uzt.isChecked();
        HardCoderJNI.hcSNSMsgScrollDelay = bi.getInt(this.uzu.getText().toString(), HardCoderJNI.hcSNSMsgScrollDelay);
        HardCoderJNI.hcSNSMsgScrollCPU = this.uzx.getSelectedItemPosition();
        HardCoderJNI.hcSNSMsgScrollIO = this.uzy.getSelectedItemPosition();
        HardCoderJNI.hcSNSMsgScrollThr = this.uzz.isChecked();
        HardCoderJNI.hcSNSMsgScrollTimeout = bi.getInt(this.uzv.getText().toString(), HardCoderJNI.hcSNSMsgScrollTimeout);
        HardCoderJNI.hcSNSMsgScrollAction = bi.getLong(this.uzw.getText().toString(), HardCoderJNI.hcSNSMsgScrollAction);
        HardCoderJNI.hcMediaGalleryScrollEnable = this.uzA.isChecked();
        HardCoderJNI.hcMediaGalleryScrollDelay = bi.getInt(this.uzB.getText().toString(), HardCoderJNI.hcMediaGalleryScrollDelay);
        HardCoderJNI.hcMediaGalleryScrollCPU = this.uzE.getSelectedItemPosition();
        HardCoderJNI.hcMediaGalleryScrollIO = this.uzF.getSelectedItemPosition();
        HardCoderJNI.hcMediaGalleryScrollThr = this.uzG.isChecked();
        HardCoderJNI.hcMediaGalleryScrollTimeout = bi.getInt(this.uzC.getText().toString(), HardCoderJNI.hcMediaGalleryScrollTimeout);
        HardCoderJNI.hcMediaGalleryScrollAction = bi.getLong(this.uzD.getText().toString(), HardCoderJNI.hcMediaGalleryScrollAction);
        HardCoderJNI.hcAlbumScrollEnable = this.uzH.isChecked();
        HardCoderJNI.hcAlbumScrollDelay = bi.getInt(this.uzI.getText().toString(), HardCoderJNI.hcAlbumScrollDelay);
        HardCoderJNI.hcAlbumScrollCPU = this.uzL.getSelectedItemPosition();
        HardCoderJNI.hcAlbumScrollIO = this.uzM.getSelectedItemPosition();
        HardCoderJNI.hcAlbumScrollThr = this.uzN.isChecked();
        HardCoderJNI.hcAlbumScrollTimeout = bi.getInt(this.uzJ.getText().toString(), HardCoderJNI.hcAlbumScrollTimeout);
        HardCoderJNI.hcAlbumScrollAction = bi.getLong(this.uzK.getText().toString(), HardCoderJNI.hcAlbumScrollAction);
        a(this.mController.tml.getSharedPreferences("hardcoder_setting", 0).edit());
        HardCoderJNI.reloadSPConfig(HardCoderJNI.RELOAD_SCENE_SETTING);
        super.onDestroy();
    }

    private static void a(Editor editor) {
        editor.putBoolean("KEY_HC_ENABLE", HardCoderJNI.hcEnable);
        editor.putBoolean("KEY_HC_DEBUG", HardCoderJNI.hcDebug);
        editor.putInt("KEY_HC_RETRY_INTERVAL", HardCoderJNI.hcRetryInterval);
        editor.putBoolean("KEY_HC_SWITCH_ENABLE", HardCoderJNI.hcSwitchEnable);
        editor.putBoolean("KEY_HC_TIME_LIMIT", HardCoderJNI.hcTimeLimit);
        editor.putInt("KEY_HC_BEGIN_TIME_HOUR", HardCoderJNI.hcBeginTimeHour);
        editor.putInt("KEY_HC_BEGIN_TIME_MIN", HardCoderJNI.hcBeginTimeMin);
        editor.putInt("KEY_HC_END_TIME_HOUR", HardCoderJNI.hcEndTimeHour);
        editor.putInt("KEY_HC_END_TIME_MIN", HardCoderJNI.hcEndTimeMin);
        editor.putBoolean("KEY_HC_BOOT_ENABLE", HardCoderJNI.hcBootEnable);
        editor.putInt("KEY_HC_BOOT_DELEY", HardCoderJNI.hcBootDelay);
        editor.putInt("KEY_HC_BOOT_CPU", HardCoderJNI.hcBootCPU);
        editor.putInt("KEY_HC_BOOT_IO", HardCoderJNI.hcBootIO);
        editor.putBoolean("KEY_HC_BOOT_THR", HardCoderJNI.hcBootThr);
        editor.putInt("KEY_HC_BOOT_TIMEOUT", HardCoderJNI.hcBootTimeout);
        editor.putLong("KEY_HC_BOOT_ACTION", HardCoderJNI.hcBootAction);
        editor.putBoolean("KEY_HC_ENTER_CHATTING_ENABLE", HardCoderJNI.hcEnterChattingEnable);
        editor.putInt("KEY_HC_ENTER_CHATTING_DELEY", HardCoderJNI.hcEnterChattingDelay);
        editor.putInt("KEY_HC_ENTER_CHATTING_CPU", HardCoderJNI.hcEnterChattingCPU);
        editor.putInt("KEY_HC_ENTER_CHATTING_IO", HardCoderJNI.hcEnterChattingIO);
        editor.putBoolean("KEY_HC_ENTER_CHATTING_THR", HardCoderJNI.hcEnterChattingThr);
        editor.putInt("KEY_HC_ENTER_CHATTING_TIMEOUT", HardCoderJNI.hcEnterChattingTimeout);
        editor.putLong("KEY_HC_ENTER_CHATTING_ACTION", HardCoderJNI.hcEnterChattingAction);
        editor.putBoolean("KEY_HC_QUIT_CHATTING_ENABLE", HardCoderJNI.hcQuitChattingEnable);
        editor.putInt("KEY_HC_QUIT_CHATTING_DELEY", HardCoderJNI.hcQuitChattingDelay);
        editor.putInt("KEY_HC_QUIT_CHATTING_CPU", HardCoderJNI.hcQuitChattingCPU);
        editor.putInt("KEY_HC_QUIT_CHATTING_IO", HardCoderJNI.hcQuitChattingIO);
        editor.putBoolean("KEY_HC_QUIT_CHATTING_THR", HardCoderJNI.hcQuitChattingThr);
        editor.putInt("KEY_HC_QUIT_CHATTING_TIMEOUT", HardCoderJNI.hcQuitChattingTimeout);
        editor.putLong("KEY_HC_QUIT_CHATTING_ACTION", HardCoderJNI.hcQuitChattingAction);
        editor.putBoolean("KEY_HC_SEND_MSG_ENABLE", HardCoderJNI.hcSendMsgEnable);
        editor.putInt("KEY_HC_SEND_MSG_DELEY", HardCoderJNI.hcSendMsgDelay);
        editor.putInt("KEY_HC_SEND_MSG_CPU", HardCoderJNI.hcSendMsgCPU);
        editor.putInt("KEY_HC_SEND_MSG_IO", HardCoderJNI.hcSendMsgIO);
        editor.putBoolean("KEY_HC_SEND_MSG_THR", HardCoderJNI.hcSendMsgThr);
        editor.putInt("KEY_HC_SEND_MSG_TIMEOUT", HardCoderJNI.hcSendMsgTimeout);
        editor.putLong("KEY_HC_SEND_MSG_ACTION", HardCoderJNI.hcSendMsgAction);
        editor.putBoolean("KEY_HC_SEND_PIC_MSG_ENABLE", HardCoderJNI.hcSendPicMsgEnable);
        editor.putInt("KEY_HC_SEND_PIC_MSG_DELEY", HardCoderJNI.hcSendPicMsgDelay);
        editor.putInt("KEY_HC_SEND_PIC_MSG_CPU", HardCoderJNI.hcSendPicMsgCPU);
        editor.putInt("KEY_HC_SEND_PIC_MSG_IO", HardCoderJNI.hcSendPicMsgIO);
        editor.putBoolean("KEY_HC_SEND_PIC_MSG_THR", HardCoderJNI.hcSendPicMsgThr);
        editor.putInt("KEY_HC_SEND_PIC_MSG_TIMEOUT", HardCoderJNI.hcSendPicMsgTimeout);
        editor.putLong("KEY_HC_SEND_PIC_MSG_ACTION", HardCoderJNI.hcSendPicMsgAction);
        editor.putBoolean("KEY_HC_RECEIVE_MSG_ENABLE", HardCoderJNI.hcReceiveMsgEnable);
        editor.putInt("KEY_HC_RECEIVE_MSG_DELEY", HardCoderJNI.hcReceiveMsgDelay);
        editor.putInt("KEY_HC_RECEIVE_MSG_CPU", HardCoderJNI.hcReceiveMsgCPU);
        editor.putInt("KEY_HC_RECEIVE_MSG_IO", HardCoderJNI.hcReceiveMsgIO);
        editor.putBoolean("KEY_HC_RECEIVE_MSG_THR", HardCoderJNI.hcReceiveMsgThr);
        editor.putInt("KEY_HC_RECEIVE_MSG_TIMEOUT", HardCoderJNI.hcReceiveMsgTimeout);
        editor.putLong("KEY_HC_RECEIVE_MSG_ACTION", HardCoderJNI.hcReceiveMsgAction);
        editor.putBoolean("KEY_HC_UPDATE_CHATROOM_ENABLE", HardCoderJNI.hcUpdateChatroomEnable);
        editor.putInt("KEY_HC_UPDATE_CHATROOM_DELEY", HardCoderJNI.hcUpdateChatroomDelay);
        editor.putInt("KEY_HC_UPDATE_CHATROOM_CPU", HardCoderJNI.hcUpdateChatroomCPU);
        editor.putInt("KEY_HC_UPDATE_CHATROOM_IO", HardCoderJNI.hcUpdateChatroomIO);
        editor.putBoolean("KEY_HC_UPDATE_CHATROOM_THR", HardCoderJNI.hcUpdateChatroomThr);
        editor.putInt("KEY_HC_UPDATE_CHATROOM_TIMEOUT", HardCoderJNI.hcUpdateChatroomTimeout);
        editor.putLong("KEY_HC_UPDATE_CHATROOM_ACTION", HardCoderJNI.hcUpdateChatroomAction);
        editor.putLong("KEY_HC_UPDATE_CHATROOM_MEMBER_COUNT", HardCoderJNI.hcUpdateChatroomMemberCount);
        editor.putBoolean("KEY_HC_DB_ENABLE", HardCoderJNI.hcDBEnable);
        editor.putInt("KEY_HC_DB_DELEY_QUERY", HardCoderJNI.hcDBDelayQuery);
        editor.putInt("KEY_HC_DB_DELEY_WRITE", HardCoderJNI.hcDBDelayWrite);
        editor.putInt("KEY_HC_DB_CPU", HardCoderJNI.hcDBCPU);
        editor.putInt("KEY_HC_DB_IO", HardCoderJNI.hcDBIO);
        editor.putBoolean("KEY_HC_DB_THR", HardCoderJNI.hcDBThr);
        editor.putInt("KEY_HC_DB_TIMEOUT", HardCoderJNI.hcDBTimeout);
        editor.putInt("KEY_HC_DB_TIMEOUT", HardCoderJNI.hcDBTimeoutBusy);
        editor.putLong("KEY_HC_DB_ACTION_QUERY", HardCoderJNI.hcDBActionQuery);
        editor.putLong("KEY_HC_DB_ACTION_WRITE", HardCoderJNI.hcDBActionWrite);
        editor.putBoolean("KEY_HC_ENCODE_VIDEO_ENABLE", HardCoderJNI.hcEncodeVideoEnable);
        editor.putInt("KEY_HC_ENCODE_VIDEO_DELEY", HardCoderJNI.hcEncodeVideoDelay);
        editor.putInt("KEY_HC_ENCODE_VIDEO_CPU", HardCoderJNI.hcEncodeVideoCPU);
        editor.putInt("KEY_HC_ENCODE_VIDEO_IO", HardCoderJNI.hcEncodeVideoIO);
        editor.putBoolean("KEY_HC_ENCODE_VIDEO_THR", HardCoderJNI.hcEncodeVideoThr);
        editor.putInt("KEY_HC_ENCODE_VIDEO_TIMEOUT", HardCoderJNI.hcEncodeVideoTimeout);
        editor.putLong("KEY_HC_ENCODE_VIDEO_ACTION", HardCoderJNI.hcEncodeVideoAction);
        editor.putBoolean("KEY_HC_DECODE_PIC_ENABLE", HardCoderJNI.hcDecodePicEnable);
        editor.putInt("KEY_HC_DECODE_PIC_DELEY", HardCoderJNI.hcDecodePicDelay);
        editor.putInt("KEY_HC_DECODE_PIC_CPU", HardCoderJNI.hcDecodePicCPU);
        editor.putInt("KEY_HC_DECODE_PIC_IO", HardCoderJNI.hcDecodePicIO);
        editor.putBoolean("KEY_HC_DECODE_PIC_THR", HardCoderJNI.hcDecodePicThr);
        editor.putInt("KEY_HC_DECODE_PIC_TIMEOUT", HardCoderJNI.hcDecodePicTimeout);
        editor.putLong("KEY_HC_DECODE_PIC_ACTION", HardCoderJNI.hcDecodePicAction);
        editor.putBoolean("KEY_HC_GIF_ENABLE", HardCoderJNI.hcGifEnable);
        editor.putInt("KEY_HC_GIF_DELEY", HardCoderJNI.hcGifDelay);
        editor.putInt("KEY_HC_GIF_CPU", HardCoderJNI.hcGifCPU);
        editor.putInt("KEY_HC_GIF_IO", HardCoderJNI.hcGifIO);
        editor.putBoolean("KEY_HC_GIF_THR", HardCoderJNI.hcGifThr);
        editor.putInt("KEY_HC_GIF_TIMEOUT", HardCoderJNI.hcGifTimeout);
        editor.putLong("KEY_HC_GIF_ACTION", HardCoderJNI.hcGifAction);
        editor.putBoolean("KEY_HC_GIF_FRAME_ENABLE", HardCoderJNI.hcGifFrameEnable);
        editor.putInt("KEY_HC_GIF_FRAME_DELEY", HardCoderJNI.hcGifFrameDelay);
        editor.putInt("KEY_HC_GIF_FRAME_CPU", HardCoderJNI.hcGifFrameCPU);
        editor.putInt("KEY_HC_GIF_FRAME_IO", HardCoderJNI.hcGifFrameIO);
        editor.putBoolean("KEY_HC_GIF_FRAME_THR", HardCoderJNI.hcGifFrameThr);
        editor.putInt("KEY_HC_GIF_FRAME_TIMEOUT", HardCoderJNI.hcGifFrameTimeout);
        editor.putLong("KEY_HC_GIF_FRAME_ACTION", HardCoderJNI.hcGifFrameAction);
        editor.putBoolean("KEY_HC_SNS_SCROLL_ENABLE", HardCoderJNI.hcSNSScrollEnable);
        editor.putInt("KEY_HC_SNS_SCROLL_DELEY", HardCoderJNI.hcSNSScrollDelay);
        editor.putInt("KEY_HC_SNS_SCROLL_CPU", HardCoderJNI.hcSNSScrollCPU);
        editor.putInt("KEY_HC_SNS_SCROLL_IO", HardCoderJNI.hcSNSScrollIO);
        editor.putBoolean("KEY_HC_SNS_SCROLL_THR", HardCoderJNI.hcSNSScrollThr);
        editor.putInt("KEY_HC_SNS_SCROLL_TIMEOUT", HardCoderJNI.hcSNSScrollTimeout);
        editor.putLong("KEY_HC_SNS_SCROLL_ACTION", HardCoderJNI.hcSNSScrollAction);
        editor.putBoolean("KEY_HC_SNS_USER_SCROLL_ENABLE", HardCoderJNI.hcSNSUserScrollEnable);
        editor.putInt("KEY_HC_SNS_USER_SCROLL_DELEY", HardCoderJNI.hcSNSUserScrollDelay);
        editor.putInt("KEY_HC_SNS_USER_SCROLL_CPU", HardCoderJNI.hcSNSUserScrollCPU);
        editor.putInt("KEY_HC_SNS_USER_SCROLL_IO", HardCoderJNI.hcSNSUserScrollIO);
        editor.putBoolean("KEY_HC_SNS_USER_SCROLL_THR", HardCoderJNI.hcSNSUserScrollThr);
        editor.putInt("KEY_HC_SNS_USER_SCROLL_TIMEOUT", HardCoderJNI.hcSNSUserScrollTimeout);
        editor.putLong("KEY_HC_SNS_USER_SCROLL_ACTION", HardCoderJNI.hcSNSUserScrollAction);
        editor.putBoolean("KEY_HC_SNS_MSG_SCROLL_ENABLE", HardCoderJNI.hcSNSMsgScrollEnable);
        editor.putInt("KEY_HC_SNS_MSG_SCROLL_DELEY", HardCoderJNI.hcSNSMsgScrollDelay);
        editor.putInt("KEY_HC_SNS_MSG_SCROLL_CPU", HardCoderJNI.hcSNSMsgScrollCPU);
        editor.putInt("KEY_HC_SNS_MSG_SCROLL_IO", HardCoderJNI.hcSNSMsgScrollIO);
        editor.putBoolean("KEY_HC_SNS_MSG_SCROLL_THR", HardCoderJNI.hcSNSMsgScrollThr);
        editor.putInt("KEY_HC_SNS_MSG_SCROLL_TIMEOUT", HardCoderJNI.hcSNSMsgScrollTimeout);
        editor.putLong("KEY_HC_SNS_MSG_SCROLL_ACTION", HardCoderJNI.hcSNSMsgScrollAction);
        editor.putBoolean("KEY_HC_MEDIA_GALLERY_SCROLL_ENABLE", HardCoderJNI.hcMediaGalleryScrollEnable);
        editor.putInt("KEY_HC_MEDIA_GALLERY_SCROLL_DELEY", HardCoderJNI.hcMediaGalleryScrollDelay);
        editor.putInt("KEY_HC_MEDIA_GALLERY_SCROLL_CPU", HardCoderJNI.hcMediaGalleryScrollCPU);
        editor.putInt("KEY_HC_MEDIA_GALLERY_SCROLL_IO", HardCoderJNI.hcMediaGalleryScrollIO);
        editor.putBoolean("KEY_HC_MEDIA_GALLERY_SCROLL_THR", HardCoderJNI.hcMediaGalleryScrollThr);
        editor.putInt("KEY_HC_MEDIA_GALLERY_SCROLL_TIMEOUT", HardCoderJNI.hcMediaGalleryScrollTimeout);
        editor.putLong("KEY_HC_MEDIA_GALLERY_SCROLL_ACTION", HardCoderJNI.hcMediaGalleryScrollAction);
        editor.putBoolean("KEY_HCALBUM_SCROLL_ENABLE", HardCoderJNI.hcAlbumScrollEnable);
        editor.putInt("KEY_HC_ALBUM_SCROLL_DELEY", HardCoderJNI.hcAlbumScrollDelay);
        editor.putInt("KEY_HC_ALBUM_SCROLL_CPU", HardCoderJNI.hcAlbumScrollCPU);
        editor.putInt("KEY_HC_ALBUM_SCROLL_IO", HardCoderJNI.hcAlbumScrollIO);
        editor.putBoolean("KEY_HC_ALBUM_SCROLL_THR", HardCoderJNI.hcAlbumScrollThr);
        editor.putInt("KEY_HC_ALBUM_SCROLL_TIMEOUT", HardCoderJNI.hcAlbumScrollTimeout);
        editor.putLong("KEY_HC_ALBUM_SCROLL_ACTION", HardCoderJNI.hcAlbumScrollAction);
        editor.apply();
    }

    protected final int getLayoutId() {
        return R.i.hardcoder_setting;
    }

    private static String f(Context context, int i, int i2) {
        String e = w.e(context.getSharedPreferences(ad.chY(), 0));
        String chP = w.chP();
        if (!e.equalsIgnoreCase("zh_CN") && (!e.equalsIgnoreCase("language_default") || !"zh_CN".equalsIgnoreCase(chP))) {
            return DateFormat.getTimeInstance(3, w.Wl(e)).format(new Time(i, i2, 0));
        }
        int i3;
        if (i > 12) {
            i3 = i - 12;
        } else {
            i3 = i;
        }
        return h.p(context, (((long) i) * 3600000) + (((long) i2) * 60000)) + String.format("%02d:%02d", new Object[]{Integer.valueOf(i3), Integer.valueOf(i2)});
    }
}
